#+TITLE:       Intro to Spell: An Elixir WAMP Client
#+AUTHOR:      Thomas Moulia
#+EMAIL:       jtmoulia@pocketknife.io
#+DATE:        2015-03-15 Sat
#+URI:         /blog/%y/%m/%d/intro-to-spell
#+KEYWORDS:    elixir, 
#+TAGS:        elixir, erlang, contracting
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: ob-elixir: interactive development in elixir using org-mode

#+PROPERTY: header-args :exports both :cache yes

I contracted with [[https://www.mymedsandme.com][MyMeds&Me]], a London based company focusing on pharmaceutical
adverse event reporting and event capture, to build [[https://github.com/MyMedsAndMe/spell][Spell]].

* A WAMP Client

The [[http://wamp.ws/][Web Application Messaging Protocol]] [WAMP] is an open messaging protocol
designed by [[http://tavendo.com/][Tavendo GmbH]]. It specifies Publish Subscribe [PubSub] and Remote
Procedure Call [RPC] functionality using a modular approach; peers must
implement the basic protocol, but can negotiate advanced features. As an open
specification, it supports polyglot, service oriented backends.

* Spell's Purpose and Implementation

MyMeds&Me was interested in decoupling their backend and transitioning from Ruby
to Elixir, which led them to WAMP. WAMP supports peers written in any language
within the same distributed system, allowing which could implement or rewrite
services in the most appropriate language. However, there was no WAMP client
written in Elixir, i.e. no bridge for transitioning components over. 

I worked with the MyMeds&Me engineering team to specify the requirements for an
Elixir WAMP client, and flesh out the requirements into a technical plan and
timeline. The work was split into two steps: first, the basic WAMP profile, and
secondly, particular advanced features (e.g. challenge response authentication
[CRA]) critical to their application. From initial design to completion, the
project took less than two months.

* Comments

There was another WAMP client written in Erlang, [[https://github.com/bwegh/awre][awre]]. We decided to implement a
new client to take advantage of Elixir's extensibility and ecosystem. Spell uses
Elixir libraries and tools where possible.

Elixir was a great fit for development. Erlang's message passing architecture
and failure handling is a natural fit for network applications. Overlaid with
Elixir's extensibility (metaprogramming and protocols, anyone?) we had a client
which supported synchronous and asynchronous styles of programming, and could be
easily extended to support WAMP's serialization and transport options. You can
read more about it in the [[https://github.com/MyMedsAndMe/spell/blob/master/README.md][README]].
